#+TITLE: Emacs configuration
:PROPERTIES:
#+AUTHOR: hoaxdream
#+STARTUP: fold
#+PROPERTY: header-args:emacs-lisp :results silent
:END:

* TODO Packages to try [0/5]
+ [-] doom-modeline
+ [ ] toc-org
+ [ ] define-word
+ [ ] mw-thesaurus
+ [ ] general
* Meta
  This file contains my wip Emacs configuration.

** Exported file note
   The following is exported to the top of the tangled init.el file as a note.

#+BEGIN_SRC emacs-lisp :tangle yes
  ;;;
  ;;; hoaxdream's Emacs Configuration
  ;;;

  ;; Copyright (C) hoaxdream
  ;; Author: hoaxdream
  ;; URL: https://github.com/hoaxdream
  ;; This file is not part of GNU Emacs.
  ;; This file is free software.

  ;; ------- The following code was auto-tangled from an Orgmode file. ------- ;;
#+END_SRC

* Packages
** Install Packages
#+BEGIN_SRC emacs-lisp :tangle yes
(require 'package)

(add-to-list 'package-archives '("gnu" . "https://elpa.gnu.org/packages/"))
(add-to-list 'package-archives '("melpa" . "https://stable.melpa.org/packages/"))

;; Package list
(setq package-list '(
	;; Emacs
	use-package

	;; QoL & Utilities
	flycheck auto-complete

	;; Themes
	base16-theme dashboard

	;; Keyboard
	evil which-key

	;; Org-related
	org-superstar evil-org markdown-mode
	))

;; Install packages that aren't installed
(unless package-archive-contents
	(package-refresh-contents))

(dolist (package package-list)
	(unless (package-installed-p package)
		(package-install package)))

(require 'use-package)
(setq use-package-always-ensure t)
(setq use-package-verbose nil)
#+END_SRC

** Flycheck
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package flycheck
	:init
	(global-flycheck-mode t))
#+END_SRC

** Completion
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package auto-complete
	:config
	(ac-config-default))
#+END_SRC

** Theme
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package base16-theme
	:config
	(load-theme 'base16-gruvbox-dark-hard t))
#+END_SRC

** Dashboard
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package dashboard
	:init
	(setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
	(setq dashboard-center-content t)
	(setq dashboard-startup-banner 'logo)
	(setq dashboard-show-shortcuts nil)
	(setq dashboard-set-navigator t)
	(setq dashboard-items '((recents . 5)
							(agenda . 5)))
	:config
	(dashboard-setup-startup-hook))
#+END_SRC

** Evil
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package evil
	:init
	(setq evil-want-integration t)
	(setq evil-want-keybinding nil)
	(setq evil-want-C-u-scroll t)
	(setq evil-want-C-i-jump nil)
	(setq evil-want-Y-yank-to-eol t)
	(setq evil-respect-visual-line-mode t)
	(setq evil-undo-system 'undo-fu)
	(setq evil-search-module 'evil-search)
	;; move to window when splitting
	(setq evil-split-window-below t)
	(setq evil-vsplit-window-right t)
	(setq evil-auto-indent nil)
	:config
	(evil-mode 1)
	(define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
	(define-key evil-motion-state-map "_" 'evil-end-of-line)
	(define-key evil-motion-state-map "0" 'evil-beginning-of-line)
	(evil-set-initial-state 'messages-buffer-mode 'normal)
	(evil-set-initial-state 'dashboard-mode 'normal))
#+END_SRC

** Which-key
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package which-key
	:config
	(setq which-key-idle-delay 0.3)
	(setq which-key-popup-type 'frame)
	(which-key-mode)
	(which-key-setup-minibuffer)
	(set-face-attribute 'which-key-local-map-description-face nil
		:weight 'bold))
#+END_SRC

* Org Mode
** Org Superstar
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package org-superstar
	:hook
	(org-mode . org-superstar-mode)
	:init
	(setq org-superstar-leading-bullet ?　)
	(setq org-superstar-headline-bullets-list '("✖" "✚" "◉" "○" "▶")
		org-ellipsis " ↴ "))
#+END_SRC

** Evil Org
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package evil-org
	:hook ((org-mode . evil-org-mode)
			(org-mode . (lambda ()
				(require 'evil-org)
				(evil-normalize-keymaps)
				(evil-org-set-key-theme '(textobjects))
				(require 'evil-org-agenda)
				(evil-org-agenda-set-keys)))))
#+END_SRC

** Markdown Mode
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package markdown-mode
	:mode (("README\\.md\\'" . gfm-mode)
			("\\.md\\'" . markdown-mode)
			("\\.markdown\\'" . markdown-mode))
	:init (setq markdown-command "multimarkdown"))
#+END_SRC

** Org Agenda
#+BEGIN_SRC emacs-lisp :tangle yes
(setq org-agenda-files '("~/.config/dev/rsync/org/personal.org"
						 "~/.config/dev/personal/notes/task.org"
						 "~/.config/dev/personal/notes/notes.org"))

(setq org-agenda-compact-blocks t)
(global-set-key (kbd "C-c o")
				(lambda () (interactive) (find-file "~/.config/dev/personal/notes/notes.org")))
#+END_SRC

** Function
#+BEGIN_SRC emacs-lisp :tangle yes
(defun get-time ()
	(interactive)
	(insert (format-time-string "%I:%M %p")))

(global-set-key (kbd "C-c t") 'get-time)
#+END_SRC
